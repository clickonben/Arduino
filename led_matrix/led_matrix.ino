
int latchPin = 7;
int clockPin = 8;
int dataPin = 6;

byte squares[][4][2] { 
                     { {B00000000, B01101001 }, 
                       {B00000000, B01101001 }, 
                       {B00000000, B01101001 }, 
                       {B00000000, B01101001 } },
                     { {B00000000, B11110111 }, 
                       {B01100000, B10011011 }, 
                       {B01100000, B10011101 }, 
                       {B00000000, B11111110 } },
                     { {B01100000, B00001001 }, 
                       {B01100000, B00001001 }, 
                       {B01100000, B00001001 }, 
                       {B01100000, B00001001 } },
                     { {B11110000, B00000111 }, 
                       {B10010000, B00001011 }, 
                       {B10010000, B00001101 }, 
                       {B11110000, B00001110 } }, 
                     { {B00000000, B00001001 }, 
                       {B00000110, B00001001 }, 
                       {B00000110, B00001001 }, 
                       {B00000000, B00001001 } },
                     { {B00001111, B00000111 }, 
                       {B00001001, B00001011 }, 
                       {B00001001, B00001101 }, 
                       {B00001111, B00001110 } } };

byte lines[][4][2]   {
                     { {B00000000, B11110000 }, 
                       {B00000000, B11110000 }, 
                       {B00000000, B11110000 }, 
                       {B00000000, B11110000 } },                      
                     { {B11110000, B00000111 }, 
                       {B00000000, B11111000 }, 
                       {B00000000, B11111000 }, 
                       {B00000000, B11111000 } },
                     { {B11110000, B00000011 }, 
                       {B11110000, B00000011 }, 
                       {B00000000, B11111100 }, 
                       {B00000000, B11111100 } },
                     { {B11110000, B00000001 }, 
                       {B11110000, B00000001 }, 
                       {B11110000, B00000001 }, 
                       {B00000000, B11111110 } },
                     { {B11110000, B00000000 }, 
                       {B11110000, B00000000 }, 
                       {B11110000, B00000000 }, 
                       {B11110000, B00000000 } },
                     { {B00001111, B00000111 }, 
                       {B11110000, B00001000 }, 
                       {B11110000, B00001000 }, 
                       {B11110000, B00001000 } },
                     { {B00001111, B00000011 }, 
                       {B00001111, B00000011 }, 
                       {B11110000, B00001100 }, 
                       {B11110000, B00001100 } },
                     { {B00001111, B00000001 }, 
                       {B00001111, B00000001 }, 
                       {B00001111, B00000001 }, 
                       {B11110000, B00001110 } },
                     { {B00001111, B00000000 }, 
                       {B00001111, B00000000 }, 
                       {B00001111, B00000000 }, 
                       {B00001111, B00000000 } },                     
                     { {B00000000, B11110111 }, 
                       {B00001111, B00001000 }, 
                       {B00001111, B00001000 }, 
                       {B00001111, B00001000 } },
                     { {B00000000, B11110011 }, 
                       {B00000000, B11110011 }, 
                       {B00001111, B00001100 }, 
                       {B00001111, B00001100 } },
                     { {B00000000, B11110001 }, 
                       {B00000000, B11110001 }, 
                       {B00000000, B11110001 }, 
                       {B00001111, B00001110 } } };
byte cycle[] { squares, lines };

unsigned long currentMillis;
unsigned long previousMillis = 0;
long interval = 100;
int len;

void setup() 
{
  pinMode(latchPin, OUTPUT);
  pinMode(clockPin, OUTPUT);
  pinMode(dataPin, OUTPUT);
  len = sizeof(lines) / sizeof(lines[0]);
}

void loop() 
{
  
  for (int i =0; i < len; i++)
  {
    while(!intervalPassed())
    {      
      for (int j = 0; j < 4; j++)
      {
        digitalWrite(latchPin, LOW);  
        shiftOut(dataPin, clockPin, MSBFIRST, lines[i][j][0] );
        shiftOut(dataPin, clockPin, MSBFIRST, lines[i][j][1] );
        digitalWrite(latchPin, HIGH);                     
      }       
    }        
  }
}

bool intervalPassed()
{
  currentMillis = millis();
  bool passed = false;
  if(currentMillis - previousMillis > interval) 
  {    
    previousMillis = currentMillis;
    passed = true;
  } 
  return passed;
}
